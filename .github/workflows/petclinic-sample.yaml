name: OpenShift Pet Clinic Workflow
on: [ push, workflow_dispatch ]

env:
  IMAGE_REGISTRY: quay.io
  IMAGE_REGISTRY_NAMESPACE: takinosh
  TEST_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE }}
  APP_NAME: spring-petclinic
  APP_PORT: 8080
  TEAR_DOWN: false

jobs:
  #####################################################################################################################
  ## The compile job compiles the application into a jar, and uploads it as an artifact for the next job to use.
  compile:
    name: Compile
    runs-on: ubuntu-20.04
    outputs:
      jarname: ${{ steps.get-jarname.outputs.jarname }}
      commit_sha: ${{ steps.commit-data.outputs.short_sha }}
    env:
      TARGET_DIR: target/
      MVN_REPO_DIR: ~/.m2/repository
    steps:
    - uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v2
      with:
        distribution: temurin
        java-version: 11
        cache: maven

    - run: java -version

    - run: mvn -ntp -B package

    # Store the output jar into the env for reuse below.
    # It will contain, eg. "spring-petclinic-2.3.0.BUILD-SNAPSHOT.jar"
    - name: Get jar filename
      id: get-jarname
      run: |
        export JAR_NAME="$(basename $(ls target/*.jar))"
        echo "Petclinic jar is $JAR_NAME"
        echo "JAR_NAME=$JAR_NAME" >> $GITHUB_ENV

    # Upload the jar for future jobs to use.
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.JAR_NAME }}
        path: ${{ env.TARGET_DIR }}/${{ env.JAR_NAME }}
        if-no-files-found: error

    # Use the commit short-sha as the suffix of the app_name
    - name: Get commit short-sha
      id: commit-data
      uses: redhat-actions/common/commit-data@v1
  
  #####################################################################################################################
  ## The build and push image job builds the container image with the petclinic jar in it,
  ## and pushes it to an image registry.
  ## It outputs the image tag and image URL for the next step to use when deploying to the OpenShift cluster.
  build-push-image:
    name: Build and Push to Quay
    runs-on: ubuntu-20.04
    needs: compile
    outputs:
      registry-path: ${{ steps.push-to-quay.outputs.registry-path }}
    env:
      JAR_NAME: ${{ needs.compile.outputs.jarname }}
      IMAGE_TAGS: latest ${{ needs.compile.outputs.commit_sha }}
    steps:
      # Download the jar artifact from the compile step
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.JAR_NAME }}

      - name: Prepare directory structure
        run: |
          ls -R /home/runner/work/spring-petclinic/spring-petclinic

      - name: List directory contents
        run: ls -lath . && pwd

      #- name: Print the jarfile name and exit if not found 
      #  run: |
      #    echo "Jar file is ${{ env.JAR_NAME }}"
      #    if [ -z ${{ env.JAR_NAME }} ]; then
      #      echo "Jar name not found"
      #      exit 1
      #    fi       

      # The dockerfile expects the jar to be under target/
      - name: Fake target/ dir
        run: |
          mkdir target/
          mv -v /home/runner/work/spring-petclinic/spring-petclinic/*-SNAPSHOT.jar target/
        

      # Use buildah to build the application image with the jar inside.
      - name: Build Image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.APP_NAME }}
          tags: ${{ env.IMAGE_TAGS }}
          oci: true
          base-image: docker.io/fabric8/java-alpine-openjdk11-jre
          content: |
            /home/runner/work/spring-petclinic/spring-petclinic/*-SNAPSHOT.jar
          entrypoint: java -jar spring-petclinic-2.5.0.BUILD-SNAPSHOT.jar
          port: ${{ env.APP_PORT }}

      # Push the built image to our image registry so it can be pulled into the OpenShift cluster.
      - name: Push to Quay
        id: push-to-quay
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REGISTRY_NAMESPACE }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # For deploying to OpenShift, see https://github.com/redhat-actions/oc-new-app/blob/main/.github/workflows/example.yml
        #####################################################################################################################

      - name: Run the built container
        run: |
          docker run -d --name test-container -p 8080:8080   ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REGISTRY_NAMESPACE }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAGS }} 
          sleep 10  # Give some time for the app to start up

      - name: Print Docker logs
        run: |
          docker logs test-container
         
      - name: Test the running application
        run: |
          curl -vvv http://localhost:8080 
  ## The deploy-to-openshift job deploys the container image to an OpenShift cluster.
  deploy-to-openshift:
    name: Deploy to OpenShift
    runs-on: ubuntu-20.04
    needs: build-push-image
    env:
      IMAGE_PATH: ${{ needs.build-push-image.outputs.registry-path }}
      TAG: ${{ needs.build-push-image.outputs.tags }}
    steps:

      # Setup oc CLI
      - name: Setup OC CLI
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}

            
      # This step will create a deployment, service, and route to run your app and expose it to the internet.
      - name: Create and expose app
        id: oc-new-app
        uses: redhat-actions/oc-new-app@v1 #Test the checked-out version of this action - a user would need the above 'uses'.
        # uses: ./
        env:
          IMAGE: ${{ env.IMAGE_PATH }}
        with:
          app_name: ${{ env.APP_NAME }}
          image:  ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REGISTRY_NAMESPACE }}/${{ env.APP_NAME }}:latest
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}
          build_env: |
            MY_ENV=MY_VALUE

      # Optional: Tear down resources after a job (useful for PRs or temporary environments)
      # This will delete the app and all its associated resources.
      - name: Tear Down (Optional)
        if: env.TEAR_DOWN == 'true'
        run: |
          oc delete all -l app=$APP_NAME
