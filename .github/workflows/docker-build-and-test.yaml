name: Docker Build and Test Workflow
on: [ pull_request, push, workflow_dispatch ]
env:
  APP_NAME: petclinic
  APP_PORT: 8080

jobs:
  compile:
    name: Compile
    runs-on: ubuntu-20.04
    outputs:
      jarname: ${{ steps.get-jarname.outputs.jarname }}
      commit_sha: ${{ steps.commit-data.outputs.short_sha }}
    env:
      TARGET_DIR: target/
      MVN_REPO_DIR: ~/.m2/repository
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 11
          cache: maven

      - run: java -version

      - run: mvn -ntp -B package

      - name: Get jar filename
        id: get-jarname
        run: |
          export JAR_NAME="$(basename $(ls target/*.jar))"
          echo "Petclinic jar is $JAR_NAME"
          echo "::set-output name=jarname::$JAR_NAME"
          echo "JAR_NAME=$JAR_NAME" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.JAR_NAME }}
          path: ${{ env.TARGET_DIR }}/${{ env.JAR_NAME }}
          if-no-files-found: error

      - name: Get commit short-sha
        id: commit-data
        uses: redhat-actions/common/commit-data@v1

  build-and-test-image:
    name: Build and Test Image
    runs-on: ubuntu-20.04
    needs: compile
    env:
      JAR_NAME: ${{ needs.compile.outputs.jarname }}
      SHA: ${{ needs.compile.outputs.commit_sha }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.JAR_NAME }}

      - name: Prepare directory structure
        run: |
          mkdir target/
          mv -v ${{ env.JAR_NAME }} target/

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.APP_NAME }}:${{ env.SHA }} .

      - name: Run the built container
        run: |
          docker run -d --name test-container -p 8080:8080  ${{ env.APP_NAME }}:${{ env.SHA }}
          sleep 10  # Give some time for the app to start up
    
      - name: Print Docker logs
        run: |
          docker logs test-container
        
      - name: Test the running application
        run: |
          curl -vvv http://localhost:8080 
